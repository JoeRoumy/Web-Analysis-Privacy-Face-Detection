<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Privacy++</title>
    <!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script> -->
	<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
	<!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.css"> -->
	<script src="faceapijs/dist/face-api.js"></script>
	<script src="faceapijs/examples/examples-browser/public/js/commons.js"></script>
	<script src="faceapijs/examples/examples-browser/public/js/drawing.js"></script>
	<script src="faceapijs/examples/examples-browser/public/js/faceDetectionControls.js"></script>
    <style media="screen">

        * {
            font-family: Montserrat, "Helvetica Neue", Helvetica, Arial, sans-serif;
            font-weight: bolder;
        }

        .row {
            margin: 0;
        }

        .navbar-default {
            height: 100px;
            padding-top: 23px;
            padding-left: 70px;
            border: 0;
            border-radius: 0 !important;
            background: #2c3e50;
        }

        .navbar-default .navbar-brand {
            text-transform: uppercase;
            font-size: 2em;
            text-decoration: none;
            color: white;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .navbar-default .navbar-brand:hover {
            color: #18bc9c;
            transition: color 0.3s ease;
        }

        .card {
            padding: 10px;
            padding-top: 20px;
            background: #18bc9c;
            border: 1px #c8c3ff solid;
            border-radius: 5px;
            text-align: center;
            margin: 10px 3% 1% 3%;
            height: 190px;
            width: calc(80% * (1/3));
        }

        .card .card-title {
            color: #02695e;
            font-size: 2em;
            font-weight: bold;
            text-transform: capitalize;
        }

        .card .card-link {
            margin-top: 40px;
            font-size: 1.1em;
            font-weight: bold;
            width: 90%;
            border: 2px solid white;
            color: white;
            background: transparent;
            transition: background-color 0.5s ease;
        }

        .card .card-link:hover {
            color: #18bc9c;
            background: white;
            transition: background-color 0.5s ease;
        }

        .form-container {
            height: 400px;
            border-left: 1px solid gray;
            padding-left: 30px;
        }

        .form-control {
            width: 90%;
        }

		/* The Overlay (background) */

    </style>
</head>

<div id="myNav" class="overlay">
	<div class="overlay-content" style="z-index: 1;">

		<a href="#" >Private Content</a>
	</div>
</div>

<body>
<style media="screen">
.overlay {
  /* Height & width depends on how you want to reveal the overlay (see JS below) */
  height: 100%;
  width: 0;
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  background-color: rgb(0,0,0); /* Black fallback color */
  /* background-color: rgba(0,0,0,0); /* Black w/opacity */ */
  overflow-x: hidden; /* Disable horizontal scroll */
  transition: 0.5s; /* 0.5 second transition effect to slide in or slide down the overlay (height or width, depending on reveal) */
  display: none;
}

/* Position the content inside the overlay */
.overlay-content {
  position: relative;
  top: 25%; /* 25% from the top */
  width: 100%; /* 100% width */
  text-align: center; /* Centered text/links */
  margin-top: 30px; /* 30px top margin to avoid conflict with the close button on smaller screens */
}

/* The navigation links inside the overlay */
.overlay a {
  padding: 8px;
  text-decoration: none;
  font-size: 36px;
  color: #818181;
  display: block; /* Display block instead of inline */
  transition: 0.3s; /* Transition effects on hover (color) */
}

/* When you mouse over the navigation links, change their color */
.overlay a:hover, .overlay a:focus {
  color: #f1f1f1;
}

/* Position the close button (top right corner) */
.overlay .closebtn {
  position: absolute;
  top: 20px;
  right: 45px;
  font-size: 60px;
}

/* When the height of the screen is less than 450 pixels, change the font-size of the links and position the close button again, so they don't overlap */
@media screen and (max-height: 450px) {
  .overlay a {font-size: 20px}
  .overlay .closebtn {
	font-size: 40px;
	top: 15px;
	right: 35px;
  }
}
</style>



    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand" href="#" onclick="openNav()">Just a random private page</a>
            </div>
        </div>
    </nav>
    <div class="row">
        <div class="col-xs-12 col-md-8">
            <div class="row page-container" align="center">
				<div style="position: relative" class="margin">
					<video style="z-index: 3;" onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted></video>
					<canvas style="position: absolute; top: 0; left:9.5%; z-index:2 ; background:rgba(0,0,0,0.1)" id="vidoverlay"/>
				</div>


				<br><br>
				<button class="form-control" type="button" name="button" onclick="start()">Start</button>
				<br>
				<button class="form-control" type="button" name="button" onclick="stop()">Stop</button>
				<script>

				let faceMatcher = null
				let faceDescriptors = null
				let countFaceMatcher = 0
				let dangerFlag = 0

				function start() {


					const constraints = {
					  video: true
					};

					const video = document.querySelector('video');

					navigator.mediaDevices.getUserMedia(constraints).
					  then((stream) => {video.srcObject = stream});
				};
				function stop() {
					const constraints = {
					  video: true
					};

					const video = document.querySelector('video');
					over = $('#vidoverlay').get(0)
					// console.log(over);
					over.width=0;

					// navigator.mediaDevices.getUserMedia(constraints).
					//   then((stream) => {});
					video.srcObject = null;over.height=0;
				};
				function openNav() {
					over = $('#vidoverlay').get(0)
					over.style.display="none";
  					document.getElementById("myNav").style.display = "block";
					document.getElementById("myNav").style.width = "100%";
				};

				/* Close */
				function closeNav() {
				  document.getElementById("myNav").style.display = "none";
				  document.getElementById("myNav").style.width = "0%";
				  over = $('#vidoverlay').get(0)
				  over.style.display="";
			  	};

				 async function onPlay() {

					 if (dangerFlag>=3) {
					 	openNav()
					}else if (dangerFlag<=0) {
						closeNav()
					}

			      const videoEl = $('#inputVideo').get(0)
				  // console.log(isFaceDetectionModelLoaded());
			      if(videoEl.paused || videoEl.ended || !isFaceDetectionModelLoaded())
			        return setTimeout(() => onPlay())

				  countFaceMatcher+=1

				  // console.log();
				  //
			      // const options = getFaceDetectorOptions()
				  //
			      // const result = await faceapi.detectSingleFace(videoEl, options)
				  //
			      // if (result) {
					//   console.log(result);
			      //   drawDetections(videoEl, $('#vidoverlay').get(0), [result])
			      // }

				  updateResults()

			      setTimeout(() => onPlay())
			  };



			  async function updateReferenceImageResults() {
				  // console.log("in update");
			    const imgEl = $('#inputVideo').get(0)
			    const canvas = $('#vidoverlay').get(0)

			    fullFaceDescriptionsold = await faceapi
			  	.detectAllFaces(imgEl, getFaceDetectorOptions())
			  	.withFaceLandmarks()
			  	.withFaceDescriptors()

				// console.log(fullFaceDescriptionsold);


				fullFaceDescriptions = []
				for (var i = 0; i < fullFaceDescriptionsold.length; i++) {
					if(fullFaceDescriptionsold[i].detection._score>0.6){
						fullFaceDescriptions.push(fullFaceDescriptionsold[i])
					}
				}

				if (!fullFaceDescriptions.length) {
			  	return
			    }
				if(!faceDescriptors||fullFaceDescriptions.length>faceDescriptors.length){
					// create FaceMatcher with automatically assigned labels
					// from the detection results for the reference image
					faceMatcher = new faceapi.FaceMatcher(fullFaceDescriptions)
					faceDescriptors = fullFaceDescriptions

				}
					// resize detection and landmarks in case displayed image is smaller than
					// original size
					resizedResults = resizeCanvasAndResults(imgEl, canvas, fullFaceDescriptions)
					// draw boxes with the corresponding label as text
					const labels = faceMatcher.labeledDescriptors
					.map(ld => ld.label)
					const boxesWithText = resizedResults
					.map(res => res.detection.box)
					.map((box, i) => new faceapi.BoxWithText(box, labels[i]))
					faceapi.drawDetection(canvas, boxesWithText)
			  }

			  async function updateQueryImageResults() {
				  // console.log("in query");
			    if (!faceMatcher) {
					console.log("no face matcher in query");
			  	return
			    }

			    const imgEl = $('#inputVideo').get(0)
			    const canvas = $('#vidoverlay').get(0)

			    const results = await faceapi
			  	.detectAllFaces(imgEl, getFaceDetectorOptions())
			  	.withFaceLandmarks()
			  	.withFaceDescriptors()

			    // resize detection and landmarks in case displayed image is smaller than
			    // original size
			    resizedResults = resizeCanvasAndResults(imgEl, canvas, results)
			    // draw boxes with the corresponding label as text

			    const boxesWithText = resizedResults.map(({ detection, descriptor }) =>
			  	new faceapi.BoxWithText(
			  	  detection.box,
			  	  // match each face descriptor to the reference descriptor
			  	  // with lowest euclidean distance and display the result as text
			  	  faceMatcher.findBestMatch(descriptor).toString()
			  	)
			    )
				bad = false
				// console.log(boxesWithText);
				for (var i = 0; i < boxesWithText.length; i++) {
					// console.log(boxesWithText[i]._text)
					var s = boxesWithText[i]._text.split('(')
					console.log(s,parseFloat(s[1].split(')')[0]));
					if (s[0]=='unknown '&& parseFloat(s[1].split(')')[0])>0.6){
						// console.log("danger");

						bad = true
					}
				}

				faceapi.drawDetection(canvas, boxesWithText)
				if (!bad && results.length>0){
					dangerFlag-=1.5
					if(dangerFlag<0)
					dangerFlag = 0
				}else{
					dangerFlag +=1.5
					if (dangerFlag>3) {
						dangerFlag=3
					}
				}
				console.log(dangerFlag);
			  }

			  async function updateResults() {
				  if (countFaceMatcher<10) {
					  // console.log(countFaceMatcher);
					   updateReferenceImageResults()
				  }else {

					   updateQueryImageResults()
				  }
			  }


			  async function  run() {
		        // load face detection model
		       await changeFaceDetector(TINY_FACE_DETECTOR)
		        changeInputSize(160,0.25)
				await faceapi.loadFaceLandmarkModel('faceapijs/weights')
		        await faceapi.loadFaceRecognitionModel('faceapijs/weights')
		        // try to access users webcam and stream the images
		        // to the video element
		        // const stream = navigator.mediaDevices.getUserMedia({ video: {} })
		        // const videoEl = $('#inputVideo').get(0)
		        // videoEl.srcObject = stream
		      }


				$(document).ready(function() {
			      // renderNavBar('#navbar', 'webcam_face_detection')
			      initFaceDetectionControls()
			      run().then(()=>{
					  $('#inputsizee').get(0).value=160
					  $('#confidencee').get(0).value=0.25
					  alert("ready")})

			    })
				</script>
            </div>
        </div>
        <div class="col-xs-12 col-md-4">
            <div class="form-container">
                <h3 style="margin-bottom:40px;">Demo controls</h3>
                    <div class="form-group">
                        <label for="InputTitle">Input Size</label>
                        <input name = "title" type="text" class="form-control" id="inputsizee" placeholder="Input Size">
                    </div>
                    <div class="form-group">
                        <label for="InputLink">Confidence</label>
                        <input name = "URL" type="url" class="form-control" id="confidencee" placeholder="Confidence">
                    </div>
                    <button onclick="updatethresholds()" class="btn btn-default">Submit</button>
					<script type="text/javascript">
						function updatethresholds() {

							const sizee = $('#inputsizee').get(0)
							const conff = $('#confidencee').get(0)

							console.log(sizee.value,conff.value)
							if(sizee.value && conff.value)
							changeInputSize(sizee.value,conff.value)
						}
					</script>
            </div>
        </div>
		<br><br><br><br>
    </div>
	<br><br><br><br>

</html>
